package controllers.Event;

import entities.Event;
import entities.User;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.stage.Stage;
import services.AuthService;
import services.EventService;
import utils.EventValidator;

import java.net.URL;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.Date;
import java.util.Map;
import java.util.ResourceBundle;

public class EventEditController implements Initializable {

    @FXML
    private TextField titleField;

    @FXML
    private TextArea descriptionArea;

    @FXML
    private DatePicker dateDebutPicker;

    @FXML
    private Spinner<Integer> heureDebutSpinner;

    @FXML
    private Spinner<Integer> minuteDebutSpinner;

    @FXML
    private DatePicker dateFinPicker;

    @FXML
    private Spinner<Integer> heureFinSpinner;

    @FXML
    private Spinner<Integer> minuteFinSpinner;

    @FXML
    private Spinner<Integer> maxParticipantsSpinner;

    @FXML
    private ComboBox<String> statusComboBox;

    @FXML
    private TextField imageField;

    @FXML
    private Button saveButton;

    @FXML
    private Button cancelButton;

    private Event event;
    private EventService eventService;
    private AuthService authService;

    public EventEditController() {
        eventService = EventService.getInstance();
        authService = AuthService.getInstance();
    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        // Initialiser les spinners pour les heures et minutes
        SpinnerValueFactory<Integer> heureDebutValueFactory = new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 23, 8);
        heureDebutSpinner.setValueFactory(heureDebutValueFactory);

        SpinnerValueFactory<Integer> minuteDebutValueFactory = new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 59, 0);
        minuteDebutSpinner.setValueFactory(minuteDebutValueFactory);

        SpinnerValueFactory<Integer> heureFinValueFactory = new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 23, 18);
        heureFinSpinner.setValueFactory(heureFinValueFactory);

        SpinnerValueFactory<Integer> minuteFinValueFactory = new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 59, 0);
        minuteFinSpinner.setValueFactory(minuteFinValueFactory);

        // Initialiser le spinner pour le nombre maximum de participants
        SpinnerValueFactory<Integer> maxParticipantsValueFactory = new SpinnerValueFactory.IntegerSpinnerValueFactory(1, 1000, 50);
        maxParticipantsSpinner.setValueFactory(maxParticipantsValueFactory);

        // Initialiser le combobox pour le statut
        statusComboBox.getItems().addAll("actif", "annulé", "complet");
        statusComboBox.setValue("actif");
    }

    public void setEvent(Event event) {
        this.event = event;

        // Remplir les champs avec les valeurs de l'événement
        titleField.setText(event.getTitle());
        descriptionArea.setText(event.getDescription());

        // Convertir les dates Java en LocalDate et LocalTime
        Date dateDebut = event.getDate_debut();
        LocalDateTime dateTimeDebut = dateDebut.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
        dateDebutPicker.setValue(dateTimeDebut.toLocalDate());
        heureDebutSpinner.getValueFactory().setValue(dateTimeDebut.getHour());
        minuteDebutSpinner.getValueFactory().setValue(dateTimeDebut.getMinute());

        Date dateFin = event.getDate_fin();
        LocalDateTime dateTimeFin = dateFin.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
        dateFinPicker.setValue(dateTimeFin.toLocalDate());
        heureFinSpinner.getValueFactory().setValue(dateTimeFin.getHour());
        minuteFinSpinner.getValueFactory().setValue(dateTimeFin.getMinute());

        maxParticipantsSpinner.getValueFactory().setValue(event.getMax_participants());
        statusComboBox.setValue(event.getStatus());
        imageField.setText(event.getImage());
    }

    @FXML
    public void handleSave(ActionEvent actionEvent) {
        // Récupérer les valeurs des champs
        StringBuilder validationErrors = new StringBuilder();

        // Valider le titre
        String title = titleField.getText();
        String titleError = EventValidator.isValidTitle(title);
        if (titleError != null) {
            validationErrors.append("- ").append(titleError).append("\n");
        }

        // Valider la description
        String description = descriptionArea.getText();
        String descriptionError = EventValidator.isValidDescription(description);
        if (descriptionError != null) {
            validationErrors.append("- ").append(descriptionError).append("\n");
        }

        // Valider la date de début
        LocalDate dateDebut = dateDebutPicker.getValue();
        if (dateDebut == null) {
            validationErrors.append("- La date de début est obligatoire\n");
            return; // Impossible de continuer sans date de début
        }

        // Valider la date de fin
        LocalDate dateFin = dateFinPicker.getValue();
        if (dateFin == null) {
            validationErrors.append("- La date de fin est obligatoire\n");
            return; // Impossible de continuer sans date de fin
        }

        // Valider l'image
        String image = imageField.getText();
        String imageError = EventValidator.isValidImageUrl(image);
        if (imageError != null) {
            validationErrors.append("- ").append(imageError).append("\n");
        }

        // Afficher les erreurs de base si présentes
        if (validationErrors.length() > 0) {
            showAlert(Alert.AlertType.ERROR, "Erreur de validation", validationErrors.toString());
            return;
        }

        // Récupérer les heures et minutes
        int heureDebut = heureDebutSpinner.getValue();
        int minuteDebut = minuteDebutSpinner.getValue();
        LocalDateTime dateTimeDebut = LocalDateTime.of(dateDebut, LocalTime.of(heureDebut, minuteDebut));
        Date dateDebutJava = Date.from(dateTimeDebut.atZone(ZoneId.systemDefault()).toInstant());

        int heureFin = heureFinSpinner.getValue();
        int minuteFin = minuteFinSpinner.getValue();
        LocalDateTime dateTimeFin = LocalDateTime.of(dateFin, LocalTime.of(heureFin, minuteFin));
        Date dateFinJava = Date.from(dateTimeFin.atZone(ZoneId.systemDefault()).toInstant());

        // Valider les dates avec les nouvelles fonctions
        String dateDebutError = EventValidator.isValidDateDebut(dateDebutJava);
        if (dateDebutError != null) {
            showAlert(Alert.AlertType.ERROR, "Erreur de validation", "- " + dateDebutError);
            return;
        }

        String dateFinError = EventValidator.isValidDateFin(dateFinJava, dateDebutJava);
        if (dateFinError != null) {
            showAlert(Alert.AlertType.ERROR, "Erreur de validation", "- " + dateFinError);
            return;
        }

        int maxParticipants = maxParticipantsSpinner.getValue();
        String maxParticipantsError = EventValidator.isValidMaxParticipants(maxParticipants);
        if (maxParticipantsError != null) {
            showAlert(Alert.AlertType.ERROR, "Erreur de validation", "- " + maxParticipantsError);
            return;
        }

        String status = statusComboBox.getValue();
        String statusError = EventValidator.isValidStatus(status);
        if (statusError != null) {
            showAlert(Alert.AlertType.ERROR, "Erreur de validation", "- " + statusError);
            return;
        }

        try {
            // Mettre à jour l'événement
            event.setTitle(title);
            event.setDescription(description);
            event.setDate_debut(dateDebutJava);
            event.setDate_fin(dateFinJava);
            event.setMax_participants(maxParticipants);
            event.setStatus(status);
            event.setImage(image);

            // L'événement a déjà été validé par les méthodes individuelles

            // Enregistrer les modifications
            eventService.updateEvent(event);

            // Fermer la fenêtre
            showAlert(Alert.AlertType.INFORMATION, "Succès", "L'événement a été modifié avec succès");
            closeWindow();
        } catch (SQLException e) {
            showAlert(Alert.AlertType.ERROR, "Erreur", "Erreur lors de la modification de l'événement: " + e.getMessage());
            e.printStackTrace();
        } catch (IllegalArgumentException e) {
            showAlert(Alert.AlertType.ERROR, "Erreur de validation", e.getMessage());
        }
    }

    @FXML
    public void handleCancel(ActionEvent actionEvent) {
        closeWindow();
    }

    private void closeWindow() {
        Stage stage = (Stage) cancelButton.getScene().getWindow();
        stage.close();
    }

    private void showAlert(Alert.AlertType alertType, String title, String content) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }
}
